// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// datasource db {
//   provider  = "mysql"
//   url       = env("DATABASE_URL")
// }

model Account {
  id                           String              @id @default(cuid())
  transaction_clients          TransactionClient[]
  collection_clients           CollectionClient[]
  name                         String              @unique
  transaction_history_access   Boolean
  income_expenses_access       Boolean
  collection_monitoring_access Boolean
  created_at                   DateTime            @default(now())
  updated_at                   DateTime            @updatedAt

  @@map(name: "accounts")
}

model TransactionClient {
  id           String        @id @default(cuid())
  account      Account?      @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id   String?
  transactions Transaction[]
  name         String        @unique
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  @@map(name: "transaction_clients")
}

model Transaction {
  id                    String             @id @default(cuid())
  transaction_client    TransactionClient? @relation(fields: [transaction_client_id], references: [id], onDelete: Cascade)
  transaction_client_id String?
  date                  DateTime           @db.Date
  voucher               String             @unique
  check                 String             @unique
  particulars           String             @db.Text
  type                  String
  amount                Decimal            @db.Decimal(15, 2)
  status                String
  proof                 String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt

  @@map(name: "transactions")
}

model CollectionClient {
  id          String       @id @default(cuid())
  account     Account?     @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id  String?
  collections Collection[]
  name        String       @unique
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@map(name: "collection_clients")
}

model Collection {
  id                   String            @id @default(cuid())
  collection_client    CollectionClient? @relation(fields: [collection_client_id], references: [id], onDelete: Cascade)
  collection_client_id String?
  property             String
  location             String
  start                DateTime          @db.Date
  end                  DateTime          @db.Date
  advance              Int
  deposit              Int
  tenant_price         Decimal?          @db.Decimal(15, 2)
  owner_income         Decimal?          @db.Decimal(15, 2)
  abic_income          Decimal?          @db.Decimal(15, 2)
  due                  DateTime          @db.Date
  created_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt

  @@map(name: "collections")
}
