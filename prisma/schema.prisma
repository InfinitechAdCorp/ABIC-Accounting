// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id         String    @id @default(cuid())
  listings   Listing[]
  t_clients  TClient[]
  c_clients  CClient[]
  pdc_sets   PDCSet[]
  name       String    @unique
  th_access  Boolean
  cm_access  Boolean
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map(name: "accounts")
}

model TClient {
  id           String        @id @default(cuid())
  account      Account?      @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id   String?
  transactions Transaction[]
  name         String        @unique
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  @@map(name: "t_clients")
}

model Transaction {
  id          String   @id @default(cuid())
  t_client    TClient? @relation(fields: [t_client_id], references: [id], onDelete: Cascade)
  t_client_id String?
  date        DateTime @db.Date
  voucher     String?  @unique
  check       String?  @unique
  particulars String   @db.Text
  type        String
  amount      Decimal  @db.Decimal(15, 2)
  status      String
  proof       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map(name: "transactions")
}

model PDCSet {
  id         String   @id @default(cuid())
  account    Account? @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id String?
  pdcs       PDC[]
  name       String
  pay_to     String
  start      DateTime @db.Date
  end        DateTime @db.Date
  check      String
  type       String
  amount     Decimal  @db.Decimal(15, 2)

  @@map(name: "pdc_sets")
}

model PDC {
  id         String   @id @default(cuid())
  pdc_set    PDCSet?  @relation(fields: [pdc_set_id], references: [id], onDelete: Cascade)
  pdc_set_id String?
  date       DateTime @db.Date

  @@map(name: "pdcs")
}

model CClient {
  id          String       @id @default(cuid())
  account     Account?     @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id  String?
  collections Collection[]
  name        String       @unique
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt

  @@map(name: "c_clients")
}

model Collection {
  id           String   @id @default(cuid())
  c_client     CClient? @relation(fields: [c_client_id], references: [id], onDelete: Cascade)
  c_client_id  String?
  property     String
  location     String
  start        DateTime @db.Date
  end          DateTime @db.Date
  advance      Int
  deposit      Int
  tenant_price Decimal? @db.Decimal(15, 2)
  owner_income Decimal? @db.Decimal(15, 2)
  abic_income  Decimal? @db.Decimal(15, 2)
  due          DateTime @db.Date
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map(name: "collections")
}

model Listing {
  id          String    @id @default(cuid())
  account     Account?  @relation(fields: [account_id], references: [id], onDelete: Cascade)
  account_id  String?
  client      String
  type        String
  project     String
  unit        String
  res         DateTime  @db.Date
  terms       String
  specialist  String
  manager     String
  list_price  Decimal   @db.Decimal(15, 2)
  total_price Decimal   @db.Decimal(15, 2)
  status      String
  source      String
  extension   DateTime? @db.Date
  closed      DateTime? @db.Date

  @@map(name: "listings")
}

model AR {
  id     String @id @default(cuid())
  number String @unique

  @@map(name: "ars")
}

model BS {
  id     String @id @default(cuid())
  number String @unique

  @@map(name: "bss")
}
